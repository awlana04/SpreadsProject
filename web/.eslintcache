[{"/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/index.tsx":"1","/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/App.tsx":"2","/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/routes.tsx":"3","/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/pages/Search.tsx":"4","/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/services/api.ts":"5","/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/pages/Result.tsx":"6"},{"size":197,"mtime":1607343947000,"results":"7","hashOfConfig":"8"},{"size":161,"mtime":1607343947000,"results":"9","hashOfConfig":"8"},{"size":410,"mtime":1607554174994,"results":"10","hashOfConfig":"8"},{"size":8690,"mtime":1607566980415,"results":"11","hashOfConfig":"8"},{"size":116,"mtime":1607343947000,"results":"12","hashOfConfig":"8"},{"size":5214,"mtime":1607561869570,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"9ou5m6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/index.tsx",[],["29","30"],"/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/App.tsx",[],"/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/routes.tsx",[],"/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/pages/Search.tsx",["31"],"import React, { ChangeEvent, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Table, Thead, Tbody, Tr, Th, Td } from 'react-super-responsive-table';\nimport { MdNavigateBefore, MdNavigateNext } from 'react-icons/md';\n\nimport api from '../services/api';\n\nimport '../styles/pages/search.css';\n\ninterface data {\n  id: number;\n  razao_social: string;\n  uf: string;\n  telefone: number;\n  tipo_de_pessoa: string;\n  data_inclusao: number;\n  status_backoffice: string;\n  supervisao_prisma: string;\n  promotor_prisma: string;\n  chave_cliente_eps: number;\n  agnt: string;\n  nm_indicado: string;\n  opcoes: string;\n  gerente: string;\n};\n\nfunction Search() {\n  const [data, setData] = useState<data[]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1)\n  const [lastPage, setLastPage] = useState<number>(1)\n\n  const [supervisors, setSupervisors] = useState<string[]>([]);\n  const [supervisorChanged, setSupervisorChanged] = useState(false);\n  const [supervisorSelected, setSupervisorSelected] = useState('');\n\n  const [promoters, setPromoters] = useState<string[]>([]);\n  const [promoterChanged, setPromoterChanged] = useState(false);\n  const [promoterSelected, setPromoterSelected] = useState('');\n\n\n  const [status, setStatus] = useState<string[]>([]);\n  const [statusChanged, setStatusChanged] = useState(false);\n  const [statusSelected, setStatusSelected] = useState('');\n\n  useEffect(() => {\n    api.get('conclude?perpage=20').then(response => {\n      setData(response.data.data)\n      setCurrentPage(Number(response.data.pagination.currentPage))\n      setLastPage(Number(response.data.pagination.lastPage))\n    })\n\n    api.get('supervisor').then(response => {\n      const supervisorList = response.data.map((supervisor: any) =>\n        supervisor.supervisao_prisma);\n\n      setSupervisors(supervisorList);\n    });\n\n    api.get('promoter').then(response => {\n      const promotersList = response.data.map((promoter: any) =>\n        promoter.promotor_prisma);\n\n      setPromoters(promotersList);\n    });\n\n    api.get('status').then(response => {\n      const statusList = response.data.map((status: any) =>\n      status.opcoes);\n\n      setStatus(statusList);\n    })\n  }, []);\n\n  useEffect(() => {\n    api.get(`conclude?perpage=20&page=${currentPage}&supervisor=${supervisorSelected}&promotor=${promoterSelected}&status=${statusSelected}`).then(response => {\n      setData(response.data.data)\n      setCurrentPage(Number(response.data.pagination.currentPage))\n      setLastPage(Number(response.data.pagination.lastPage))\n    })\n\n    if (promoterChanged) {\n      api.get(`supervisor?promotor=${promoterSelected}`).then(response => {\n        const supervisorList = response.data.map((supervisor: any) =>\n          supervisor.supervisao_prisma);\n\n        setSupervisors(supervisorList);\n      });\n      setPromoterChanged(false)\n    }\n\n    if (supervisorChanged) {\n      api.get(`promoter?supervisor=${supervisorSelected}`).then(response => {\n        const promotersList = response.data.map((promoter: any) =>\n          promoter.promotor_prisma);\n\n        setPromoters(promotersList);\n      });\n      setSupervisorChanged(false)\n    }\n\n    if (statusChanged) {\n      api.get(`supervisor?promoter?status=${statusSelected}`).then(response => {\n        const supervisorList = response.data.map((supervisor: any) =>\n        supervisor.supervisao_prisma);\n        const promotersList = response.data.map((promoter: any) => \n        promoter.promotor_prisma)\n\n        setSupervisors(supervisorList);\n        setPromoters(promotersList)\n      })\n      setStatusChanged(false);\n    }\n  }, [currentPage, supervisorSelected, promoterSelected, statusSelected]);\n\n  function handleSupervisorOption(event: ChangeEvent<HTMLSelectElement>) {\n    const supervisorOption = event.target.value;\n    \n    setSupervisorSelected(supervisorOption);\n    setSupervisorChanged(true)\n  };\n\n  function handlePromoterOption(event: ChangeEvent<HTMLSelectElement>) {\n    const promoterOption = event.target.value;\n    \n    setPromoterSelected(promoterOption);\n    setPromoterChanged(true)\n  };\n\n  function handleStatusOption(event: ChangeEvent<HTMLSelectElement>) {\n    const statusOption = event.target.value;\n\n    setStatusSelected(statusOption);\n    setStatusChanged(true);\n  };\n\n  const history = useHistory();\n\n  function handleClick(id: any) {\n    history.push(`/result/${id}`);\n  };\n\n  function handleNextPage() {\n    if (currentPage < lastPage) setCurrentPage(currentPage + 1)\n  }\n\n  function handlePrevPage() {\n    if (currentPage > 1) setCurrentPage(currentPage - 1)\n  }\n\n  return (\n    <div id=\"pageContainer\">\n      <div className=\"formContainer\">\n\n        <div className=\"selectBoxContainer\">\n          <select className=\"selectBox\" onChange={handleSupervisorOption}>\n            <option value=\"\">SELECIONE O SUPERVISOR</option>\n\n            {supervisors.map(supervisor => (\n              <option\n                key={supervisor}\n                value={supervisor}>{supervisor}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"selectBoxContainer\">\n          <select className=\"selectBox\" onChange={handlePromoterOption}>\n            <option value=\"\">SELECIONE O PROMOTOR</option>\n\n            {promoters.map(promoter => (\n              <option\n                key={promoter}\n                value={promoter}>{promoter}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"selectBoxContainer\">\n          <select className=\"selectBox\" onChange={handleStatusOption}>\n            <option value=\"\">SELECIONE OS STATUS</option>\n\n            {status.map(option => (\n              <option\n              key={option}\n              value={option}>{option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"buttonContainer\">\n        </div>\n        <button className=\"next\" onClick={handleNextPage}><MdNavigateNext size=\"24\" /></button>\n      </div>\n\n      <div className=\"pagination\">\n        <button className=\"prev\" onClick={handlePrevPage}><MdNavigateBefore size=\"24\" /></button>\n        <div className=\"numbers\">\n          <div>{currentPage}</div>\n        </div>\n        <button className=\"next\" onClick={handleNextPage}><MdNavigateNext size=\"24\" /></button>\n      </div>\n\n      <div className=\"tableContainer\">\n        <Table className=\"table\">\n          <Thead>\n            <Tr>\n              <Th>ID</Th>\n              <Th>Razão social</Th>\n              <Th>Telefone</Th>\n              <Th>Tipo Pessoa</Th>\n              <Th>Data Inclusão</Th>\n              <Th>Chave EPS</Th>\n              <Th>Agente</Th>\n              <Th>Nome Indicado</Th>\n              <Th>Gerente</Th>\n              <Th>UF</Th>\n              <Th>Status Bko</Th>\n              <Th>Supervisor</Th>\n              <Th>Promotor</Th>\n              <Th>Status</Th>\n            </Tr>\n          </Thead>\n\n          <Tbody>\n            {data.map(item => (\n              <Tr key={item.id} onClick={() => handleClick(item.id)}>\n                <Td>{item.id ? item.id : 'NÃO INFORMADO'}</Td>\n                <Td>{item.razao_social ? item.razao_social : 'NÃO INFORMADO'}</Td>\n                <Td>{item.telefone ? item.telefone : 'NÃO INFORMADO'}</Td>\n                <Td>{item.tipo_de_pessoa ? item.tipo_de_pessoa : 'NÃO INFORMADO'}</Td>\n                <Td>{item.data_inclusao ? item.data_inclusao : 'NÃO INFORMADO'}</Td>\n                <Td>{item.chave_cliente_eps ? item.chave_cliente_eps : 'NÃO INFORMADO'}</Td>\n                <Td>{item.agnt ? item.agnt : 'NÃO INFORMADO'}</Td>\n                <Td>{item.nm_indicado ? item.nm_indicado : 'NÃO INFORMADO'}</Td>\n                <Td>{item.gerente ? item.gerente : 'NÃO INFORMADO'}</Td>\n                <Td>{item.uf ? item.uf : 'NÃO INFORMADO'}</Td>\n                <Td>{item.status_backoffice ? item.status_backoffice : 'NÃO INFORMADO'}</Td>\n                <Td>{item.supervisao_prisma ? item.supervisao_prisma : 'NÃO INFORMADO'}</Td>\n                <Td>{item.promotor_prisma ? item.promotor_prisma : <p className=\"empty\">SEM ATRIBUIÇÃO</p>}</Td>\n                <Td>{item.opcoes ? item.opcoes : <p className=\"empty\">SEM TRATATIVA</p>}</Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </div>\n\n      <div className=\"pagination\">\n        <button className=\"prev\" onClick={handlePrevPage}><MdNavigateBefore size=\"24\" /></button>\n        <div className=\"numbers\">\n          <div>{currentPage}</div>\n        </div>\n        <button className=\"next\" onClick={handleNextPage}><MdNavigateNext size=\"24\" /></button>\n      </div>\n    </div >\n  )\n};\n\nexport default Search;","/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/services/api.ts",[],"/home/long1/Documents/Scripts/Projects/Prisma/SpreadsProject/web/src/pages/Result.tsx",["32"],"import React, { ChangeEvent, FormEvent, useEffect, useState } from 'react';\nimport { Table, Thead, Tbody, Tr, Th, Td } from 'react-super-responsive-table';\nimport { useParams } from 'react-router-dom';\n\nimport api from '../services/api';\n\nimport '../styles/pages/result.css'\n\ninterface data {\n  id: number;\n  razao_social: string;\n  uf: string;\n  telefone: number;\n  tipo_de_pessoa: string;\n  data_inclusao: number;\n  status_backoffice: string;\n  supervisao_prisma: string;\n  promotor_prisma: string;\n  chave_cliente_eps: number;\n  agnt: string;\n  nm_indicado: string;\n  opcoes: string;\n  gerente: string;\n  observacoes: string;\n}\n\ninterface dataParams {\n  id: string;\n};\n\nfunction Result() {\n  const { id } = useParams<dataParams>();\n\n  const [data, setData] = useState<data[]>([]);\n  const [promoter, setPromoter] = useState<string>('')\n  const [status, setStatus] = useState<string>('')\n  const [notes, setNotes] = useState<string>('')\n\n\n  useEffect(() => {\n    api.get(`conclude/${id}`).then(response => {\n      setData(response.data);\n      setPromoter(response.data[0].promotor_prisma)\n      setStatus(response.data[0].opcoes)\n      setNotes(response.data[0].observacoes)\n    });\n  }, []);\n\n  function handlePromoter(event: ChangeEvent<HTMLInputElement>) {\n    const text = event.target.value;\n    setPromoter(text)\n  }\n\n  function handleNotes(event: ChangeEvent<HTMLTextAreaElement>) {\n    const text = event.target.value;\n    setNotes(text)\n  }\n\n  function handleStatus(event: ChangeEvent<HTMLSelectElement>) {\n    const text = event.target.value;\n    setStatus(text)\n  }\n\n  async function handleSubmit(event: FormEvent) {\n    event.preventDefault()\n\n    const promotor_prisma = promoter\n    const observacoes = notes\n    const opcoes = status\n\n    const formData = {\n      promotor_prisma,\n      observacoes,\n      opcoes\n    }\n\n    const response = await api.put(`conclude/${id}`, formData)\n\n    setData(response.data)\n  }\n\n  return (\n    <div id=\"pageContainer\">\n      <div className=\"tableContainer\">\n        <Table className=\"table\">\n          <Thead>\n            <Tr>\n              <Th>ID</Th>\n              <Th>Razão social</Th>\n              <Th>Telefone</Th>\n              <Th>Tipo Pessoa</Th>\n              <Th>Data Inclusão</Th>\n              <Th>Chave EPS</Th>\n              <Th>Agente</Th>\n              <Th>Nome Indicado</Th>\n              <Th>Gerente</Th>\n              <Th>UF</Th>\n              <Th>Status Bko</Th>\n              <Th>Supervisor</Th>\n              <Th>Promotor</Th>\n              <Th>Status</Th>\n              <Th>Observações</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {data.map(item => (\n              <Tr key={item.id}>\n                <Td>{item.id ? item.id : 'NÃO INFORMADO'}</Td>\n                <Td>{item.razao_social ? item.razao_social : 'NÃO INFORMADO'}</Td>\n                <Td>{item.telefone ? item.telefone : 'NÃO INFORMADO'}</Td>\n                <Td>{item.tipo_de_pessoa ? item.tipo_de_pessoa : 'NÃO INFORMADO'}</Td>\n                <Td>{item.data_inclusao ? item.data_inclusao : 'NÃO INFORMADO'}</Td>\n                <Td>{item.chave_cliente_eps ? item.chave_cliente_eps : 'NÃO INFORMADO'}</Td>\n                <Td>{item.agnt ? item.agnt : 'NÃO INFORMADO'}</Td>\n                <Td>{item.nm_indicado ? item.nm_indicado : 'NÃO INFORMADO'}</Td>\n                <Td>{item.gerente ? item.gerente : 'NÃO INFORMADO'}</Td>\n                <Td>{item.uf ? item.uf : 'NÃO INFORMADO'}</Td>\n                <Td>{item.status_backoffice ? item.status_backoffice : 'NÃO INFORMADO'}</Td>\n                <Td>{item.supervisao_prisma ? item.supervisao_prisma : 'NÃO INFORMADO'}</Td>\n                <Td>{item.promotor_prisma ? item.promotor_prisma : <p className=\"empty\">SEM ATRIBUIÇÃO</p>}</Td>\n                <Td>{item.opcoes ? item.opcoes : <p className=\"empty\">SEM TRATATIVA</p>}</Td>\n                <Td>{item.observacoes ? item.observacoes : 'SEM OBSERVAÇÕES'}</Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n\n        <form onSubmit={handleSubmit} className=\"updateContainer\">\n          <input\n            type=\"text\"\n            value={promoter}\n            onChange={handlePromoter}\n            placeholder=\"DIGITE O NOME DO PROMOTOR\"\n            className=\"textInput\"\n          />\n          <textarea\n            value={notes}\n            onChange={handleNotes}\n            className=\"textArea\"\n            placeholder=\"OBSERVAÇÕES\"\n          />\n          <select className=\"selectBox\" placeholder=\"STATUS\" onChange={handleStatus}>\n            <option value={status}>{status}</option>\n            <option value=\"CLIENTE DESISTIU\">CLIENTE DESISTIU</option>\n            <option value=\"CLIENTE RECEBEU A MAQUINA\">CLIENTE RECEBEU A MAQUINA</option>\n            <option value=\"CLIENTE SEM INTERESSE\">CLIENTE SEM INTERESSE</option>\n            <option value=\"INSUCESSO NA TENTATIVA DE CONTATO\">INSUCESSO NA TENTATIVA DE CONTATO</option>\n            <option value=\"VENDA CONCLUIDA COM SUCESSO\">VENDA CONCLUIDA COM SUCESSO</option>\n          </select>\n          <button type=\"submit\" className=\"submitButton\" >SALVAR</button>\n        </form>\n\n      </div>\n    </div>\n  )\n};\n\nexport default Result;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":113,"column":6,"nodeType":"39","endLine":113,"endColumn":73,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":47,"column":6,"nodeType":"39","endLine":47,"endColumn":8,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'promoterChanged', 'statusChanged', and 'supervisorChanged'. Either include them or remove the dependency array.","ArrayExpression",["45"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [currentPage, supervisorSelected, promoterSelected, statusSelected, promoterChanged, supervisorChanged, statusChanged]",{"range":"51","text":"52"},"Update the dependencies array to be: [id]",{"range":"53","text":"54"},[3623,3690],"[currentPage, supervisorSelected, promoterSelected, statusSelected, promoterChanged, supervisorChanged, statusChanged]",[1191,1193],"[id]"]